<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      // Note: This example requires that you consent to location sharing when
      // prompted by your browser. If you see the error "The Geolocation service
      // failed.", it means you probably did not give permission for the browser to
      // locate you.
      var service;
      var map;
      var pos;
      var loc;
      var infoWindow;
      var cityCircle;

      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.7128, lng: 74.0059},
          zoom: 13
        });
        infoWindow = new google.maps.InfoWindow({map: map});
        service = new google.maps.places.PlacesService(map);

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
           setInterval(function () {
          navigator.geolocation.getCurrentPosition(function(position) {
            pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            //insert ajax code here
            //create new XMLHTTPRequest object
            //req.open (verb, url, true)
            //req.setheader...
            //req.send("pos="+pos)

            drawCircle();

            var url = "http://localhost:3000/map";
            var req = new XMLHttpRequest();
            req.open ('POST', url, true);
            req.setRequestHeader ("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
            req.send ("lat="+pos.lat+'&'+"lng="+pos.lng)
            
            infoWindow.setPosition(pos);
            infoWindow.setContent("You're here!");
            map.setCenter(pos);
             map.addListener('idle', performSearch1);

          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
          cityCircle.setMap(null);
            cityCircle = null;
        }, 10000); //try 3000 or 30000



         
        } 
        else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }

      }

      function drawCircle(){
        //try the null thing here okay Kasey????? okay.
        cityCircle = new google.maps.Circle({
              strokeColor: '#FFFF00',
              strokeOpacity: 0.8,
              strokeWeight: 2,
              fillColor: '#FFFF00',
              fillOpacity: 0.35,
              map: map,
              center: pos,
              radius: 1500,
            });
        
      }

      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
      }

      function performSearch1() {
        var request = {
          bounds: map.getBounds(),
          keyword: 'police',
        };
        service.radarSearch(request, callback);
      }

      function callback(results, status) {
        if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
        }

        var marker = new google.maps.Marker({
          position: pos,
          map: map,
          title: 'You are here'
          //icon: 'yellow_marker2.png'
        });


        marker.setMap(map);


        for (var i = 0, result; result = results[i]; i++) {
        //   addMarker(result);
        //   var dist = google.maps.geometry.spherical.computeDistanceBetween(obj.geometry.location.lat(result) , crd);
        //   console.log(dist);
        // if (dist <= 100){
          addMarker(result);
          }
        }

      function addMarker(place) {
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location,
          icon: {
            url: 'http://maps.gstatic.com/mapfiles/circle.png',
            anchor: new google.maps.Point(10, 10),
            scaledSize: new google.maps.Size(10, 17)
          }

        });
      

        marker.addListener('click', function() {
          service.getDetails(place, function(result, status) {
            if (status !== google.maps.places.PlacesServiceStatus.OK) {
              console.error(status);
              return;
            }
            infoWindow.setContent(result.name);
            infoWindow.open(map, marker);
          });
        })

      }


    </script>
    <script src="https://maps.googleapis.com/maps/api/js?k&callback=initMap&libraries=places,visualization" async defer></script>
    <!-- <script async defer
    src="https://maps.googleapis.com/maps/api/js?&callback=initMap">
    </script> -->
  </body>
</html>




<!-- <!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>:(</title>
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
    <script>
      var map;
      var infoWindow;
      var service;
      var crd;
      var tal = 0;
      var gnl = 0;
      var options = {
      enableHighAccuracy: true,
      timeout: 5000,
      maximumAge: 0
      };

  function success(pos) {
    crd = pos.coords;
    console.log(crd);
    // return crd;
    // tal = crd.latitude;
    var tal = crd.latitude;
    // gnl = crd.longitude;
    var gnl = crd.longitude;
    return tal;
    return gnl;
  };

  function error(err) {
    console.warn('ERROR(' + err.code + '): ' + err.message);
  };

  function initMap() {
    navigator.geolocation.getCurrentPosition(success, error, options)
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: tal, lng: gnl},
          zoom: 14,
          radius: 100,
          styles: [{
            stylers: [{ visibility: 'simplified' }]
          }, {
            elementType: 'labels',
            stylers: [{ visibility: 'off' }]
          }]
        });

        var cityCircle = new google.maps.Circle({
          strokeColor: '#fff',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#fff',
          fillOpacity: 0.35,
          map: map,
          center: {lat: tal, lng: gnl},
          radius: 16093,
        });

        infoWindow = new google.maps.InfoWindow();
        service = new google.maps.places.PlacesService(map);
        // The idle event is a debounced event, so we can query & listen without
        // throwing too many requests at the server.
        map.addListener('idle', performSearch);
        map.addListener('idle', performSearch1);
      }

      function performSearch() {
        var request = {
          bounds: map.getBounds(),
          keyword: 'hospital',
        };
        service.radarSearch(request, callback);
      }

      function performSearch1() {
        var request = {
          bounds: map.getBounds(),
          keyword: 'police',
        };
        service.radarSearch(request, callback);
      }

      function callback(results, status) {
        if (status !== google.maps.places.PlacesServiceStatus.OK) {
          console.error(status);
          return;
        }

        var marker = new google.maps.Marker({
          position: {lat: tal, lng: gnl},
          map: map,
          title: 'You are here'
        });

        marker.setMap(map);

        for (var i = 0, result; result = results[i]; i++) {
        //   addMarker(result);
        //   var dist = google.maps.geometry.spherical.computeDistanceBetween(obj.geometry.location.lat(result) , crd);
        //   console.log(dist);
        // if (dist <= 100){
          addMarker(result);
          }
        }

      function addMarker(place) {
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location,
          icon: {
            url: 'http://maps.gstatic.com/mapfiles/circle.png',
            anchor: new google.maps.Point(10, 10),
            scaledSize: new google.maps.Size(10, 17)
          }
        });

        google.maps.event.addListener(marker, 'click', function() {
          service.getDetails(place, function(result, status) {
            if (status !== google.maps.places.PlacesServiceStatus.OK) {
              console.error(status);
              return;
            }
            infoWindow.setContent(result.name);
            infoWindow.open(map, marker);
          });
        });
      }
    </script>
  </head>
  <body>
    <div id="map"></div>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA2tEZYe153X0mjpEFdgjViaH46lPasUMg&callback=initMap&libraries=places,visualization" async defer></script>
  </body>
</html> -->